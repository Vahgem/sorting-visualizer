{"version":3,"sources":["components/Bar.js","algorithms/helpers.js","algorithms/BS.js","algorithms/SS.js","algorithms/QS.js","algorithms/IS.js","App.js","reportWebVitals.js","index.js"],"names":["Bar","index","length","color","changeArray","useState","setLen","inputStyle","position","top","Math","floor","width","left","border","background","colors","front_bottom","transform","backgroundColor","boxShadow","transition","right_left","height","className","style","type","value","onChange","e","val","target","parseInt","swap","array","i","j","c","bs","arraySteps","colorSteps","colorKey","slice","push","Array","fill","ss","small","quickSort","start","end","pi","pivot","partition","qs","is","current","App","state","arr","arrSteps","delay","count","algorithm","timeouts","currentStep","BsSelec","SsSelec","IsSelec","QsSelec","ALGORITHMS","BubbleSort","SelectionSort","InsertionSort","QuickSort","clearColorKey","blankKey","setState","clearTimeouts","forEach","timeout","clearTimeout","generateRandomNumber","min","max","random","generateRandomArray","temp","generateSteps","currentSteps","changeArrayCount","radius","steps","prevStep","nextStep","setTimeout","changeAlgotoBS","changeAlgotoQS","changeAlgotoSS","changeAlgotoIS","this","playButtom","bars","map","Key","onClick","bss","sss","iss","qss","href","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c5dfbed.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport './Bar.css';\r\nfunction Bar({ index, length, color,changeArray }) {\r\n   \r\n   const [len,setLen]=useState(length)\r\n   \r\n    // const BarStyle = {\r\n    //    height: length,\r\n    // }\r\n\r\n    const inputStyle = {\r\n        position: 'relative',\r\n        top: Math.floor(length / 2) - 10,\r\n        width: length,\r\n        left: -Math.floor(length / 2) + 10,\r\n        border: 'none',\r\n        background: 'none',\r\n    }\r\n    const colors = [['rgba(61,90,241,0.5)', 'rgba(61,90,241,0.2)'],\r\n        ['rgba(255,48,79,1)', 'rgba(255,48,79,0.5)'],\r\n        ['rgba(255, 174, 66,1)', 'rgba(255, 174, 66,0.5)'],\r\n    ['rgba(131,232,90,0.5)', 'rgba(131,232,90,0.2)']\r\n    ];\r\n\r\n    const front_bottom = {\r\n        transform: `translateY(${200 - length}px) rotateX(-90deg)`,\r\n        backgroundColor: `${colors[color][0]}`,\r\n        boxShadow: `5px 5px 50px 5px ${colors[color][1]}`,\r\n        transition: '0.3s'\r\n    }\r\n\r\n    const right_left = {\r\n        height: `${length}px`,\r\n        transform: `translateY(${200 - length}px)`,\r\n        backgroundColor: `${colors[color][0]}`,\r\n        boxShadow: `5px 5px 50px 5px ${colors[color][1]}`,\r\n        transition: '0.3s'\r\n    }\r\n    const handleChange = (e) => {\r\n        let val = e.target.value\r\n        if (val === '') {\r\n            setLen(0)\r\n            changeArray(index,0)\r\n        }\r\n        else {\r\n            val = parseInt(val);\r\n            if (val > 200) {\r\n                setLen(parseInt(val))\r\n                changeArray(index, 200)\r\n            } else {\r\n                setLen(parseInt(val))\r\n                changeArray(index, val)\r\n            }\r\n            }\r\n\r\n    }\r\n    return (<>\r\n        <div className=\"bar\">\r\n            <div className=\"side top\" ></div>\r\n            <div className=\"side bottom\" style={front_bottom}></div>\r\n            <div className=\"side left\">\r\n                <div className=\"color-bar left-color-bar\" style={right_left} ></div>\r\n            </div>\r\n            <div className=\"side right\" >\r\n                <div className=\"color-bar right-color-bar\" style={right_left} ></div>\r\n            </div>\r\n            <div className=\"side front\">\r\n            <div className=\"color-bar front-color-bar\" style={right_left} > <input className=\"input\" type=\"number\" length={length} value={length}\r\n                    style={inputStyle} onChange={handleChange}></input></div>\r\n               \r\n            </div>\r\n            \r\n            <div className=\"side back\">\r\n            <div className=\"color-bar back-color-bar\" style={front_bottom} ></div>\r\n            </div>\r\n            <div className=\"quantity-nav\" >\r\n        </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default Bar;","\r\nexport function swap(array,i,j) {\r\n    let c = array[i];\r\n    array[i] = array[j];\r\n    array[j] = c;\r\n    return array;\r\n}\r\n","import { swap } from './helpers';\r\nconst bs = (array, position, arraySteps, colorSteps) => {\r\n    let colorKey = colorSteps[colorSteps.length - 1].slice();\r\n\r\n    for (let i = 0; i < array.length - 1; i++) {\r\n        for (let j = 0; j < array.length - i - 1; j++) {\r\n            if (array[j] > array[j + 1]) {\r\n                array = swap(array, j, j + 1);\r\n            }\r\n            arraySteps.push(array.slice());\r\n            colorKey[j] = 1;\r\n            colorKey[j + 1] = 1;\r\n            colorSteps.push(colorKey.slice());\r\n            colorKey[j] = 0;\r\n            colorKey[j + 1] = 0;\r\n        }\r\n        colorKey[array.length - 1 - i] = 2;\r\n        arraySteps.push(array.slice());\r\n        colorSteps.push(colorKey.slice());\r\n    }\r\n    colorSteps[colorSteps.length - 1] = new Array(array.length).fill(3);\r\n    return;\r\n};\r\nexport default bs;","import { swap } from './helpers';\r\nconst ss = (array, position, arraySteps, colorSteps) => {\r\n    let colorKey = colorSteps[colorSteps.length - 1].slice();\r\n    let small;\r\n    for (let i = 0; i < array.length -1; i++) {\r\n        small = i;\r\n        for (let j = i+1; j < array.length; j++) {\r\n            if (array[j] < array[small]) {\r\n                small = j;\r\n            }\r\n            arraySteps.push(array.slice());\r\n            colorKey[small] = 1;\r\n            colorKey[j] = 1;\r\n            colorSteps.push(colorKey.slice());\r\n            colorKey[small] = 0;\r\n            colorKey[j] = 0;\r\n        }\r\n        array = swap(array, small, i);\r\n        colorKey[i] = 2;\r\n        arraySteps.push(array.slice());\r\n        colorSteps.push(colorKey.slice());\r\n    }\r\n    colorSteps[colorSteps.length - 1] = new Array(array.length).fill(3);\r\n    return;\r\n};\r\nexport default ss;","import { swap } from './helpers';\r\n\r\nconst partition = (array, start, end, arraySteps, colorSteps) => {\r\n    let colorKey = colorSteps[colorSteps.length - 1].slice();\r\n    let pivot = array[end];\r\n    let i = start - 1;\r\n    for (let j = start; j < end; j++){\r\n        if (array[j] <= pivot) {\r\n            i++;\r\n            array = swap(array, i, j);\r\n            colorKey[j] = 1;\r\n            colorKey[i] = 1;\r\n            arraySteps.push(array.slice());\r\n            colorSteps.push(colorKey.slice());\r\n            colorKey[j] = 0;\r\n            colorKey[i] = 0;\r\n        }\r\n    }\r\n    array = swap(array, i + 1, end);\r\n    arraySteps.push(array.slice());\r\n    colorSteps.push(colorKey.slice());\r\n    return i + 1;\r\n}\r\n\r\nconst quickSort=(array, start, end,arraySteps, colorSteps) => {\r\n    let colorKey = colorSteps[colorSteps.length - 1].slice();\r\n    if (start < end) {\r\n        let pi = partition(array, start, end,arraySteps, colorSteps);\r\n        colorKey[pi] = 2;\r\n        arraySteps.push(array.slice());\r\n        colorSteps.push(colorKey.slice());\r\n        array = quickSort(array, start, pi - 1,arraySteps, colorSteps);\r\n        array = quickSort(array, pi + 1, end,arraySteps, colorSteps);\r\n    }\r\n    else if (start === end) {\r\n        colorKey[start] = 2;\r\n        arraySteps.push(array.slice());\r\n        colorSteps.push(colorKey.slice());\r\n    }\r\n    return array;\r\n}\r\n\r\nconst qs = (array, position, arraySteps, colorSteps) => {\r\n    let colorKey = colorSteps[colorSteps.length - 1].slice();\r\n    array = quickSort(array, 0, array.length - 1,arraySteps, colorSteps);\r\n    arraySteps.push(array.slice());\r\n    colorSteps.push(colorKey.slice());\r\n    colorSteps[colorSteps.length - 1] = new Array(array.length).fill(3);\r\n    return;\r\n};\r\nexport default qs;","import { swap } from './helpers';\r\nconst is = (array, position, arraySteps, colorSteps) => {\r\n    let colorKey = colorSteps[colorSteps.length - 1].slice();\r\n    let current;\r\n    for (let i = 0; i < array.length ; i++) {\r\n        current = i;\r\n        let j = i - 1;\r\n        colorKey[current] = 1;\r\n        while ((j >0||j===0) && array[current] < array[j]) {\r\n            array = swap(array, current, j);\r\n            colorKey[j] = 1;\r\n            colorKey[current] = 0;\r\n            current = j;\r\n            j--;\r\n            arraySteps.push(array.slice());\r\n            colorSteps.push(colorKey.slice());\r\n        }\r\n        colorKey[current] = 0;\r\n        arraySteps.push(array.slice());\r\n        colorSteps.push(colorKey.slice());\r\n    }\r\n    colorSteps[colorSteps.length - 1] = new Array(array.length).fill(3);\r\n    return;\r\n};\r\nexport default is;","import React, { Component } from 'react';\nimport Bar from './components/Bar.js';\n//CSS\nimport './app.css'\n//icons\nimport Play from '@material-ui/icons/PlayArrowRounded';\nimport Forward from '@material-ui/icons/SkipNextRounded';\nimport Backward from '@material-ui/icons/SkipPreviousRounded';\nimport Rotate from '@material-ui/icons/RotateLeft';\n//Algorithms\nimport BubbleSort from './algorithms/BS';\nimport SelectionSort from './algorithms/SS';\nimport QuickSort from './algorithms/QS';\nimport InsertionSort from './algorithms/IS';\n\nclass App extends Component {\n\n  state = {\n      arr:[],\n      arrSteps:[],\n      delay: 150,\n      count: 15,\n      algorithm: 'Bubble Sort',\n    timeouts: [],\n    currentStep: 0,\n    colorSteps:[],\n    colorKey: [],\n    color: [],\n    BsSelec: true,\n    SsSelec: false,\n    IsSelec: false,\n    QsSelec: false,\n    };\n  componentDidMount(){\n  this.generateRandomArray();\n  }\n\n\n  ALGORITHMS = {\n    'Bubble Sort': BubbleSort,\n    'Selection Sort': SelectionSort,\n    'Insertion Sort': InsertionSort,\n    'Quick Sort':  QuickSort,\n}\n  \n  clearColorKey = () => {\n    let blankKey=new Array(this.state.count).fill(0);\n    this.setState({\n      colorKey: blankKey,\n      colorSteps:[blankKey]\n    })\n  }\n  clearTimeouts = () => {\n    this.state.timeouts.forEach((timeout) => clearTimeout(timeout));\n    this.setState({\n      timeouts: []\n    });\n  };\n  generateRandomNumber = (min, max) => {\n    \n    return Math.floor(Math.random() * (max - min) + min);\n  };\n\n  generateRandomArray = () => {\n    this.clearTimeouts();\n    this.clearColorKey();\n    const count = this.state.count;\n    const temp = [];\n    for (let i = 0; i < count; i++) {\n      temp.push(this.generateRandomNumber(25, 200));\n    }\n    this.setState({\n      arr: temp,\n      arrSteps: [temp],\n      currentStep: 0,\n    }, () => {\n      this.generateSteps();\n    });\n  };\n\n  changeArray = (index, value) => {\n    let array = this.state.arr;\n    array[index] = value;\n    this.setState({\n      arr: array,\n      arrSteps: [array],\n      currentSteps: 0\n    }, () => {\n      this.generateSteps();\n    });\n  };\n\n  changeArrayCount = (e) => {\n    this.setState({\n      count: e.target.radius,\n    });\n    this.generateRandomArray();\n  }\n  generateSteps = () => {\n    let array = this.state.arr.slice();\n    let steps = this.state.arrSteps.slice();\n    let colorSteps = this.state.colorSteps.slice();\n    this.ALGORITHMS[this.state.algorithm](array, 0, steps, colorSteps);\n    this.setState({\n      arrSteps: steps,\n      colorSteps: colorSteps\n  })\n  };\n\n  prevStep = () => {\n    let currentStep = this.state.currentStep;\n    if (currentStep === 0) {\n      return;\n    }\n    currentStep -= 1;\n    this.setState({\n      currentStep: currentStep,\n      arr: this.state.arrSteps[currentStep],\n      colorKey: this.state.colorSteps[currentStep],\n    })\n}\nnextStep = () => {\n  let currentStep = this.state.currentStep;\n  if (currentStep === this.state.arrSteps.length - 1) {\n    return;\n  }\n  else {\n    currentStep += 1;\n    this.setState({\n      currentStep: currentStep,\n      arr: this.state.arrSteps[currentStep],\n      colorKey: this.state.colorSteps[currentStep],\n    });\n  }\n}\n\n  start = () => {\n    this.clearTimeouts();\n    let steps = this.state.arrSteps;\n    let colorSteps = this.state.colorSteps;\n    let timeouts = [];\n\n    let i = 0;\n\n    while (i < steps.length - this.state.currentStep) {\n      let timeout = setTimeout(() => {\n        let currentStep = this.state.currentStep;\n        this.setState({\n          arr: steps[currentStep],\n          colorKey: colorSteps[currentStep],\n          currentStep: currentStep + 1,\n        });\n        timeouts.push(timeout);\n      }, this.state.delay * i);\n      i++;\n    }\n  }\n  changeAlgotoBS = () => {\n    this.setState({\n      algorithm: 'Bubble Sort',\n      BsSelec: true,\n      SsSelec: false,\n      IsSelec: false,\n      QsSelec: false,\n    });\n\n    this.generateRandomArray();\n  }\n\n  changeAlgotoQS = () => {\n    this.setState({\n      algorithm: 'Quick Sort',\n      BsSelec: false,\n      SsSelec: false,\n      IsSelec: false,\n      QsSelec: true,\n    });\n    this.generateRandomArray();\n  }\n  changeAlgotoSS = () => {\n    this.setState({\n      algorithm: 'Selection Sort',\n      BsSelec: false,\n      SsSelec: true,\n      IsSelec: false,\n      QsSelec: false,\n    });\n    this.generateRandomArray();\n  }\n  changeAlgotoIS = () => {\n    this.setState({\n      algorithm: 'Insertion Sort',\n      BsSelec: false,\n      SsSelec: false,\n      IsSelec: true,\n      QsSelec: false,\n    });\n    this.generateRandomArray();\n  }\n  render() {\n    let bars = this.state.arr.map((value, index) => (\n      <Bar Key={index}\n        index={index}\n        length={value}\n        color={this.state.colorKey[index]}\n        changeArray={this.changeArray}\n        algorithm={this.state.algorithm}\n      />\n    ));\n\n    let playButtom;\n    if (this.state.arrSteps.length === this.state.currentStep) {\n      playButtom = (\n        <button className=\"Controller\" onClick={this.generateRandomArray}>\n          <Rotate style={{ color: \"white\" }} />\n        </button>\n      )\n    } else {\n      playButtom = (\n        <button className=\"Controller\" onClick={this.start}>\n          <Play style={{ color: \"white\" }} />\n        </button>\n      )\n    }\n    const bss = this.state.BsSelec;\n    const sss = this.state.SsSelec;\n    const iss = this.state.IsSelec;\n    const qss = this.state.QsSelec;\n   \n\n    return (\n      <div> \n         \n        <div className=\"Panel\">\n          \n          <ul className=\"Sorts\">\n          <li><a href=\"#\" className = { bss? \"selected\" : null} onClick={this.changeAlgotoBS} >BubbleSort</a></li>\n          <li ><a href=\"#\"  className = { sss ? \"selected\" : null} onClick={this.changeAlgotoSS}>Selection Sort</a></li>\n          <li ><a href=\"#\"  className = {iss ? \"selected\" : null}onClick={this.changeAlgotoIS} >Insertion Sort</a></li>\n          <li ><a  href=\"#\" className = { qss ? \"selected\" : null} onClick={this.changeAlgotoQS} >Quick Sort</a></li>\n        </ul></div>\n\n\n        <div className=\"frame\">\n          <div className=\"barsDiv container card\">{bars}</div>\n        </div>\n        \n        \n        <div className=\"Control-panel\">\n          <div className=\"Control-buttons\">\n          <button className=\"Controller\" onClick={this.prevStep}>\n            <Backward style={{ color: \"white\" }}/>\n        </button>\n            {playButtom}\n            <button className=\"Controller\" onClick={this.nextStep}>\n            <Forward style={{ color: \"white\" }}/>\n        </button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}